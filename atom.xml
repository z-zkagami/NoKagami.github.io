<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-10T18:04:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kagami</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OS X EI Capitan install ipython记录</title>
    <link href="http://yoursite.com/2016/08/07/OS%20X%20EI%20Capitan%20install%20ipython/"/>
    <id>http://yoursite.com/2016/08/07/OS X EI Capitan install ipython/</id>
    <published>2016-08-07T04:40:47.000Z</published>
    <updated>2016-08-10T18:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="OS-X-EI-Capitan安装ipython记录"><a href="#OS-X-EI-Capitan安装ipython记录" class="headerlink" title="OS X EI Capitan安装ipython记录"></a>OS X EI Capitan安装ipython记录</h3><hr>
<p>想必会主动装ipython的都知道这是干啥的了。。也不多介绍，直接贴错误和解决办法</p>
<p>os x自带python2.7.10，平时都是在vagrant里用ipython的。。谁想装个试试还各种错呢</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>报错信息：<code>OSError: [Errno: 1] Operation not permitted: &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/share</code></p>
<p>Google了一下，是因为os x 10.11以后引入了新的安全机制SIP(System Integrity Protection)，为了保护系统完整性，默认锁定<code>/System,/sbin,/usr</code>三个目录，不管你如何sudo都是没用的。。</p>
<hr>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>搜到了各种解决办法，有暴力的有优雅的。。</p>
<h5 id="方法1-推荐-："><a href="#方法1-推荐-：" class="headerlink" title="方法1(推荐)："></a>方法1(推荐)：</h5><p>本人就是用这个方法安装成功的，直接运行命令</p>
<p><code>pip install ipython --user -U</code></p>
<p>就可以直接安装成功了，安装完做个软连接到$PATH中即可</p>
<p><code>ln -sf ~/Library/Python/2.7/bin/ipython /usr/local/bin/</code></p>
<p>这样就OK啦- 3-</p>
<h5 id="方法2-没折腾。。-："><a href="#方法2-没折腾。。-：" class="headerlink" title="方法2(没折腾。。)："></a>方法2(没折腾。。)：</h5><p>使用<code>virtualenv + virtualenvwrapper/autoenv</code>，因为第一种已经解决了hiahiahia</p>
<p>感兴趣的童鞋可以尝试一下：<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">传送门</a></p>
<h5 id="方法3-不推荐-："><a href="#方法3-不推荐-：" class="headerlink" title="方法3(不推荐)："></a>方法3(不推荐)：</h5><p>直接关闭SIP机制，这样是爽了，不过很危险啊</p>
<p>按住Command+R，直到出现苹果Logo，进入恢复模式，菜单—&gt;实用工具—&gt;终端—&gt;输入<code>csutil disable</code>后回车—&gt;重启即可，想要恢复SIP重复上述操作</p>
<h5 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h5><p>使用brew重新装一个python，然后替换掉系统自带版本，有老外说brew的版本不稳，会crash randomly，不过貌似EI Capitan也改不了。。如果不关闭SIP的话，没有求证不知道。。该睡觉了 Z_Zzzz…</p>
<p>最后再提一点，别使用sudo pip</p>
<blockquote>
<p>  Instructions telling <code>sudo pip install</code> are inherently wrong</p>
<p>  If there is any tutorial out there which says you should do <code>sudo pip</code> then please file a bug against this package. The author is dis-educating Python community, as time has proven <code>sudo pip</code> to be a broken practice.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;OS-X-EI-Capitan安装ipython记录&quot;&gt;&lt;a href=&quot;#OS-X-EI-Capitan安装ipython记录&quot; class=&quot;headerlink&quot; title=&quot;OS X EI Capitan安装ipython记录&quot;&gt;&lt;/a&gt;OS X EI 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>saltstack grains/pillar组件初探</title>
    <link href="http://yoursite.com/2016/08/07/saltstack%20grains%20pillar%E7%BB%84%E4%BB%B6%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2016/08/07/saltstack grains pillar组件初探/</id>
    <published>2016-08-07T04:40:47.000Z</published>
    <updated>2016-08-18T16:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="grains-amp-pillar"><a href="#grains-amp-pillar" class="headerlink" title="grains &amp; pillar"></a>grains &amp; pillar</h3><hr>
<p>grains和pillar是saltstack中两个很重要的组件。</p>
<h4 id="grains"><a href="#grains" class="headerlink" title="grains"></a>grains</h4><p>grains的作用是收集minion基本的静态数据，比如CPU/kernel/OS/virtual/mem/disk等等。注意grains只在minion启动时做一次收集，要再次收集需手动sync、minion端主动请求、重启minion才生效。grains可以根据不同的业务进行个性化配置，比如通过jinja2来区分不同的操作系统：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% if grains[&apos;os&apos;] == &apos;Ubuntu&apos; %&#125;</div><div class="line">host： &#123;&#123; grains[&apos;host&apos;] &#125;&#125;</div><div class="line">&#123;% elif grains[&apos;os&apos;] == &apos;CentOS&apos; %&#125;</div><div class="line">host: &#123;&#123; grains[&apos;fqdn&apos;] &#125;&#125;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<h5 id="定义grains数据"><a href="#定义grains数据" class="headerlink" title="定义grains数据"></a>定义grains数据</h5><p>第一种：通过minion配置文件，只适合固定的键值</p>
<p>定义方法：编辑<code>/etc/salt/minion</code>，去掉配置参数的注释：<code>default_inclue: minion.d/*.conf</code>，然后在该路径下创建配置，这里以<code>hostinfo.conf</code>为例</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">grains:</span></div><div class="line"><span class="attr">  roles:</span></div><div class="line"><span class="bullet">    -</span> webserver</div><div class="line"><span class="bullet">    -</span> memcache</div><div class="line"><span class="attr">  deployment:</span> datacenter4</div><div class="line"><span class="attr">  cabinet:</span> <span class="number">6</span></div></pre></td></tr></table></figure>
<p>重启minion，master端查看新建的grains数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">salt &apos;minoin-1&apos; grains.item roles deployment cabinet</div></pre></td></tr></table></figure>
<p>第二种：master端脚本定义，足够灵活</p>
<p>步骤为配置master的默认<code>file_roots</code>目录：编辑/etc/salt/master</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置自定义路径，这里以默认为例</span></div><div class="line"><span class="attr">file_roots:</span> </div><div class="line"><span class="attr">  base:</span></div><div class="line"><span class="bullet">    -</span> /srv/salt/</div></pre></td></tr></table></figure>
<p>重启master生效，创建目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -pv /srv/salt/_grains</div></pre></td></tr></table></figure>
<p>master端该目录下编写python：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">## filename: sysprocess.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys, os, commands</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grains_openfile</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">        return os max open file of grains value</div><div class="line">    '''</div><div class="line">    </div><div class="line">    grains = &#123;&#125;    <span class="comment">#初始化的dict名必须是grains</span></div><div class="line">    <span class="comment">#init default value</span></div><div class="line">    _open_file = <span class="number">65535</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        getulimit=commands.getstatusoutput(<span class="string">'source /etc/profile;ulimit -n'</span>)</div><div class="line">    <span class="keyword">except</span> Exception, e:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span> getulimit[<span class="number">0</span>] == <span class="number">0</span></div><div class="line">        _open_file=int(getulimit[<span class="number">1</span>])</div><div class="line">    grains[<span class="string">'max_open_file'</span>] = _open_file    <span class="comment">#max_open_file即grains的项</span></div><div class="line">    <span class="keyword">return</span> grains</div></pre></td></tr></table></figure>
<p>然后通过命令同步到minion端，手动刷新生效:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">salt &apos;minoin-1&apos; saltutil.sync_grains     #仅刷新grains，all则刷新全局</div><div class="line"></div><div class="line">##py文件会载入到minion端的/var/cache/salt/minion/extmodes/grains/和</div><div class="line">##/var/cache/salt/minion/files/base/_grains/下</div><div class="line"></div><div class="line">salt &apos;minion-1&apos; sys.reload_modules     #重新载入</div><div class="line">##/var/cache/salt/minion/extmodes/grains/目录下会生成pyc文件</div></pre></td></tr></table></figure>
<p>查看是否生效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">salt &apos;minion-1&apos; grains.item max_open_file</div><div class="line"></div><div class="line">minion-1:</div><div class="line">    ----------</div><div class="line">    max_open_file:</div><div class="line">        65535</div></pre></td></tr></table></figure>
<hr>
<h4 id="pillar"><a href="#pillar" class="headerlink" title="pillar"></a>pillar</h4><p>pillar的作用是定义与minoin相关的任何数据，定义好的数据可以被其他组件复用(state/API/templates)，区别于grains的一点就是：pillar定义的数据可以按照业务和不同主机相关联，这样不同的业务主机只能看到自己匹配的数据，安全性很高。</p>
<h5 id="pillar的定义"><a href="#pillar的定义" class="headerlink" title="pillar的定义"></a>pillar的定义</h5><p>修改master配置文件启用pillar：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#找到pillar_opts字段，将False改为True</div><div class="line">pillar_opts: True</div><div class="line"></div><div class="line">#重启master，查看pillar信息</div><div class="line">salt &apos;minion-1&apos; pillar.data</div><div class="line"></div><div class="line">minion-1:</div><div class="line">    master:</div><div class="line">        ----------</div><div class="line">        __role:</div><div class="line">            master</div><div class="line">        auth_mode:</div><div class="line">            1</div><div class="line">        auto_accept:</div><div class="line">            False</div><div class="line">        cache_sreqs:</div><div class="line">            True</div><div class="line">        cachedir:</div><div class="line">            /var/cache/salt/master</div></pre></td></tr></table></figure>
<p>另一种方法是用干sls文件定义，编辑master配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#找到pillar_roots字段修改自定义路径</div><div class="line">pillar_roots:</div><div class="line">  base:</div><div class="line">    - /srv/pillar</div><div class="line">    </div><div class="line">#重启master生效</div></pre></td></tr></table></figure>
<p>定义入口文件top.sls:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">base:</span> </div><div class="line">  <span class="string">'*'</span>:</div><div class="line"><span class="bullet">    -</span> data</div></pre></td></tr></table></figure>
<p>定义data.sls：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">appname:</span> website</div><div class="line"><span class="attr">flow:</span></div><div class="line"><span class="attr">  maxconn:</span> <span class="number">30000</span></div><div class="line"><span class="attr">  maxmem:</span> <span class="number">4</span>G</div></pre></td></tr></table></figure>
<p>master端手动刷新pillar：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">salt &apos;minion-1&apos; saltutil.refresh_pillar</div><div class="line"></div><div class="line">#查看是否生效</div><div class="line">salt &apos;minion-1&apos; pillar.data appname flow</div><div class="line"></div><div class="line">minion-1:</div><div class="line">    ----------</div><div class="line">    appname:</div><div class="line">        website</div><div class="line">    flow:</div><div class="line">        ----------</div><div class="line">        maxconn:</div><div class="line">            30000</div><div class="line">        maxmem:</div><div class="line">            4G</div></pre></td></tr></table></figure>
<p>配合grains和jinja2的一个小例子：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">appname:</span> website</div><div class="line"><span class="attr">flow:</span></div><div class="line"><span class="attr">  maxconn:</span> <span class="number">30000</span></div><div class="line">  &#123;% if grains[<span class="string">'id'</span>] == <span class="string">'minion-1'</span> %&#125;</div><div class="line"><span class="attr">  maxcpu:</span> <span class="number">8</span></div><div class="line">  &#123;% else %&#125;</div><div class="line"><span class="attr">  maxcpu:</span> <span class="number">4</span></div><div class="line">  &#123;% endif %&#125;</div><div class="line"><span class="attr">  maxmem:</span> <span class="number">4</span>G</div></pre></td></tr></table></figure>
<p>刷新后再看pillar data：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">minion-1:</div><div class="line">    ----------</div><div class="line">    appname:</div><div class="line">        website</div><div class="line">    flow:</div><div class="line">        ----------</div><div class="line">        maxconn:</div><div class="line">            30000</div><div class="line">        maxcpu:</div><div class="line">            8</div><div class="line">        maxmem:</div><div class="line">            4G</div></pre></td></tr></table></figure>
<hr>
<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>state为saltstack的核心功能，即状态文件，可以将目标主机的状态改变为state.sls的状态。</p>
<p>定义的规则为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ID:</div><div class="line">  $state:</div><div class="line"><span class="bullet">    -</span> $state: states</div></pre></td></tr></table></figure>
<p>解释：</p>
<p>$ID:state的名称，各sls之间可以逻辑连接</p>
<p>$state:管理对象的类型，比如file/pkg/service/…类似salt命令中的模块</p>
<p>states:定制对象的状态</p>
<p>下面开始来一个安装apache的例子：</p>
<p>修改master配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/salt/master</div><div class="line">#找到file_roots字段，自定义state目录，这里以默认为例</div><div class="line">file_root:</div><div class="line">  base:</div><div class="line">    - /srv/salt/</div></pre></td></tr></table></figure>
<p>重启master生效</p>
<p>然后自定义pillar信息，参考上一部分，这里不再赘述。需要注意的是，top.sls中的配置支持两种引用，一种是直接引用，第二种是创建相应目录，并在目录下创建init.sls，推荐第二种，这里以第二种为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /srv/pillar/top.sls    #添加以下内容</div><div class="line"></div><div class="line">apache:</div><div class="line">  &apos;*&apos;:</div><div class="line">    - apache</div></pre></td></tr></table></figure>
<p>创建/srv/pillar/apache/init.sls：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">pkgs:</span></div><div class="line">&#123;% if grains[<span class="string">'os_family'</span> == <span class="string">'Debian'</span>] %&#125;</div><div class="line"><span class="attr">  apache:</span> apache2</div><div class="line">  &#123;% elif grains[<span class="string">'os_family'</span> == <span class="string">'RedHat'</span> %&#125;</div><div class="line"><span class="attr">  apache:</span> httpd</div><div class="line">  &#123;% elif grains[<span class="string">'os_family'</span> == <span class="string">'Arch'</span>] %&#125;</div><div class="line"><span class="attr">  apache:</span> apache</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p>测试一下是否成功，先刷新pillar再查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">salt &apos;minion-1&apos; saltutil.refresh_pillar</div><div class="line"></div><div class="line">salt &apos;minion-1&apos; pillar.data pkgs</div><div class="line"></div><div class="line">minion-1:</div><div class="line">    ----------</div><div class="line">    pkgs:</div><div class="line">        ----------</div><div class="line">        apache:</div><div class="line">            httpd</div></pre></td></tr></table></figure>
<p>接下来创建state文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /srv/salt/top.sls    #添加如下内容</div><div class="line"></div><div class="line">base:</div><div class="line">  &apos;*&apos;:</div><div class="line">    - apache</div></pre></td></tr></table></figure>
<p>目录结构和pillar的一样，/srv/salt/apache/init.sls，编写init.sls：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apache:</span></div><div class="line"><span class="attr">  pkg:</span></div><div class="line"><span class="bullet">    -</span> installed    <span class="comment">#检查是否安装</span></div><div class="line"><span class="attr">    - name:</span> &#123;&#123; pillar[<span class="string">'pkgs'</span>][<span class="string">'apache'</span>] &#125;&#125;    <span class="comment">#jinja2匹配包名，还记得pillar信息吗？</span></div><div class="line">  service.running:</div><div class="line"><span class="attr">    - name:</span> &#123;&#123; pillar[<span class="string">'pkgs'</span>][<span class="string">'apache'</span>] &#125;&#125;    <span class="comment">#服务名</span></div><div class="line"><span class="attr">    - require:</span></div><div class="line"><span class="attr">      - pkg:</span> &#123;&#123; pillar[<span class="string">'pkgs'</span>][<span class="string">'apache'</span>] &#125;&#125;    <span class="comment">#需要安装成功才启动，否则不启动</span></div></pre></td></tr></table></figure>
<p>在正式执行前可以测试一下是否有错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">salt &apos;minion-1&apos; state.highstate test=True</div><div class="line"></div><div class="line">minion-1:</div><div class="line">----------</div><div class="line">          ID: apache</div><div class="line">    Function: pkg.installed</div><div class="line">        Name: httpd</div><div class="line">      Result: True</div><div class="line">     Comment: Package httpd is already installed</div><div class="line">     Started: 16:50:11.571886</div><div class="line">    Duration: 1796.182 ms</div><div class="line">     Changes:   </div><div class="line">----------</div><div class="line">          ID: apache</div><div class="line">    Function: service.running</div><div class="line">        Name: httpd</div><div class="line">      Result: None</div><div class="line">     Comment: Service httpd is set to start</div><div class="line">     Started: 16:50:13.371854</div><div class="line">    Duration: 148.499 ms</div><div class="line">     Changes:   </div><div class="line"></div><div class="line">Summary for minion-1</div><div class="line">------------</div><div class="line">Succeeded: 2 (unchanged=1)</div><div class="line">Failed:    0</div><div class="line">------------</div><div class="line">Total states run:     2</div></pre></td></tr></table></figure>
<p>测试通过，确定执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">salt &apos;minion-1&apos; state.highstate</div><div class="line"></div><div class="line">minion-1:</div><div class="line">----------</div><div class="line">          ID: apache</div><div class="line">    Function: pkg.installed</div><div class="line">        Name: httpd</div><div class="line">      Result: True</div><div class="line">     Comment: Package httpd is already installed</div><div class="line">     Started: 16:52:22.956851</div><div class="line">    Duration: 1794.323 ms</div><div class="line">     Changes:   </div><div class="line">----------</div><div class="line">          ID: apache</div><div class="line">    Function: service.running</div><div class="line">        Name: httpd</div><div class="line">      Result: True</div><div class="line">     Comment: Started Service httpd</div><div class="line">     Started: 16:52:24.754977</div><div class="line">    Duration: 448.059 ms</div><div class="line">     Changes:   </div><div class="line">              ----------</div><div class="line">              httpd:</div><div class="line">                  True</div><div class="line"></div><div class="line">Summary for minion-1</div><div class="line">------------</div><div class="line">Succeeded: 2 (changed=1)</div><div class="line">Failed:    0</div><div class="line">------------</div><div class="line">Total states run:     2</div></pre></td></tr></table></figure>
<p>就先写到这儿吧。。还得赶python的进度。。python要很熟才能把这玩意儿玩的溜儿啊ORZ</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;grains-amp-pillar&quot;&gt;&lt;a href=&quot;#grains-amp-pillar&quot; class=&quot;headerlink&quot; title=&quot;grains &amp;amp; pillar&quot;&gt;&lt;/a&gt;grains &amp;amp; pillar&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;g
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac搭建GitHub+Hexo blog记录</title>
    <link href="http://yoursite.com/2016/08/07/mac%E6%90%AD%E5%BB%BAGitHub+Hexo%20blog%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/08/07/mac搭建GitHub+Hexo blog记录/</id>
    <published>2016-08-07T04:40:47.000Z</published>
    <updated>2016-08-07T17:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考Google到的各种blog的文章写作而成，第一篇blog肯定得记录一下啊 - 3-</p>
<hr>
<h4 id="基础环境安装"><a href="#基础环境安装" class="headerlink" title="基础环境安装"></a>基础环境安装</h4><h5 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h5><p>用于生成静态页面。</p>
<p>Mac安装当然首选homebrew了(如果没有安装，请移步<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">homebrew官网</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<p>其它方法：移步<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官网文档</a></p>
<h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><p>用来将本地Hexo内容commit到GitHub</p>
<p>MacOS(P.S还是喜欢叫：欧艾斯叉..)，买了Mac居然不装Xcode？同样参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方document</a></p>
<hr>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>Node.js和Git都安装好了，安装Hexo之前安装淘宝的npm镜像站，速度快一些。。我挂着为皮恩都一直出现404。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>开始安装Hexo，这里加上<code>sudo</code>是避免权限问题报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cnpm install -g hexo</div></pre></td></tr></table></figure>
<p>接着初始化并创建本地博客目录，首先创建一个你的目录，这里以<code>myhexo</code>为例，初始化创建的博客目录为<code>nokagami</code>，两个目录名字随你喜好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/myhexo</div><div class="line">hexo init nokagami</div></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure>
<p>现在你可以打开浏览器输入：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<p>就能看到你的博客了，默认安装的是<code>landscape</code>的主题，后面会讲到如何更换主题。现在可以Ctrl+c退出了，接着继续</p>
<hr>
<h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><p>这里默认你已经有了GitHub账号并且已经添加了Key信任(如果没有账号，也不知道怎么添加Key的童鞋请移步<a href="https://github.com/" target="_blank" rel="external">GitHub官网</a>，还没有注册的童鞋们，这里也要大写加粗下划线的强调一下：<strong><u><del>一定要起一个狂霸酷炫叼炸天的用户名啊，噗～</del></u></strong>)</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>好了现在账号有了，<del>叼炸天的名字也有了</del>。咱可以去GitHub上<code>create New repository</code>，<code>Repository name</code>的格式必须是<code>username.github.io</code>,<code>username</code>就是前面强调的你那叼炸天的用户名，如果不是<code>username</code>，会报404错，其它啥的不用填不用选也没关系。创建好了GitHub会生成一个<code>.git</code>的链接，复制它，马上要用到</p>
<p>刚才说到本地的Hexo已经安装成功并且可以运行了，我们来看看里面都有些啥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ls nokagami</div><div class="line"></div><div class="line">_config.yml  node_modules public       source</div><div class="line">db.json      package.json scaffolds    themes</div></pre></td></tr></table></figure>
<p>看名字都简单易懂。</p>
<p>现在修改配置文件<code>_config.yml</code>，这里得吐槽一下yaml的语法，注意下面的冒号后面必须有<strong>一个空格</strong>，后面没有内容的可以不用。。还有一点就是Hexo3.x以后的版本<code>type</code>改为<code>git</code>并不是老版本的<code>github</code>了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div><div class="line"></div><div class="line"># 按G跳到文末，然后编辑，注意把username替换成你的用户名</div><div class="line"></div><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repository: https://github.com/username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>现在还在博客目录下的吧？<code>pwd</code>确认一下位置，如果是的话继续。</p>
<p>生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g    #全称 hexo generate</div></pre></td></tr></table></figure>
<p>部署，Hexo会自动将内容commit到GitHub仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d    #全称 hexo deploy</div></pre></td></tr></table></figure>
<p>如果执行出现各种错请看这里：</p>
<p>错误1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found in ~/blog</div><div class="line">ERROR Try runing: &apos;npm install hexo --save&apos;</div></pre></td></tr></table></figure>
<p>按照提示安装即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo --save</div></pre></td></tr></table></figure>
<p>错误2:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error deployer not found:git</div></pre></td></tr></table></figure>
<p>需要安装<code>hexo-developer-git</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-developer-git --save</div></pre></td></tr></table></figure>
<p>再吐个槽，这里就知道切淘宝镜像的好处了，我挂着为皮恩，在这里安装一直提示以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-developer-git --save</div><div class="line"></div><div class="line">npm ERR! Darwin 15.4.0</div><div class="line">npm ERR! argv &quot;/usr/local/Cellar/node/6.2.2/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;hexo-developer-git&quot; &quot;--save&quot;</div><div class="line">npm ERR! node v6.2.2</div><div class="line">npm ERR! npm  v3.9.5</div><div class="line">npm ERR! code E404</div><div class="line"></div><div class="line">npm ERR! 404 Registry returned 404 for GET on https://registry.npmjs.org/hexo-developer-git</div><div class="line">npm ERR! 404</div><div class="line">npm ERR! 404  &apos;hexo-developer-git&apos; is not in the npm registry.</div><div class="line">npm ERR! 404 You should bug the author to publish it (or use the name yourself!)</div><div class="line">npm ERR! 404</div><div class="line">npm ERR! 404 Note that you can also install from a</div><div class="line">npm ERR! 404 tarball, folder, http url, or git url.</div></pre></td></tr></table></figure>
<p>其它错误暂时没有遇到了。</p>
<p>再次执行生成和部署命令，仓库名还记得吗？<a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a></p>
<p>在浏览器输入就能看到和之前在本地看到的一样的博客了。</p>
<p>文章的保存路径在博客目录下的souce/_posts下，Hexo是使用MarkDown来书写的，Google一下一大把的语法教程，生成新文章的操作，博客默认会生成一篇<code>hello-world.md</code>的文章，参考那个就好。</p>
<hr>
<h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><p><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo官方主题</a>提供了一些，看个人喜好，这里以star很多的<code>next</code>主题为例说明，当然其他类似<code>pacman</code>什么的也是极好的选择：</p>
<p>现在应该还在博客目录下，<code>pwd</code>下再次确认自己的位置。。</p>
<p>然后咱clone next主题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>修改配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div><div class="line"></div><div class="line">#找到theme,将默认的landscape替换为next</div><div class="line"></div><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>清除缓存并部署</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean    #清除db.json和已经生成的静态文件pulic</div><div class="line"></div><div class="line">hexo g    #重新生成</div><div class="line"></div><div class="line">hexo d    #部署生效</div></pre></td></tr></table></figure>
<p>刷新username.github.io就可以看到修改了，next主题的详细教程请参看，：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next教程</a></p>
<p>主要是分清楚站点配置文件和主题配置文件。</p>
<p>其它的有时间再补充了，我也是萌新一枚。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考Google到的各种blog的文章写作而成，第一篇blog肯定得记录一下啊 - 3-&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;基础环境安装&quot;&gt;&lt;a href=&quot;#基础环境安装&quot; class=&quot;headerlink&quot; title=&quot;基础环境安装&quot;&gt;&lt;/a&gt;基础环境安装&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/07/hello-world/"/>
    <id>http://yoursite.com/2016/08/07/hello-world/</id>
    <published>2016-08-07T04:40:47.000Z</published>
    <updated>2016-08-07T04:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
